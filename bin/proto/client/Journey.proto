syntax = "proto3";

package Journey;

//------------------------------------------------------------------
// 公用结构
//------------------------------------------------------------------
message JourneyBattleRecord {
  int64                       RoleUID = 1;    // 角色 UID
  bool                        IsWin = 2;    // 是否胜利  【废弃】
  int32                       HeroCfgID = 3;    // 英雄 ID
  int32                       Rank = 4;    // 排名
  int32                       Kills = 5;    // 击杀数
  int64                       TotalHurt = 6;    // 本局造成的总伤害
  int32                       Score = 7;    // 赛季得分（排位分）
  int32                       SeasonScore = 8;    // 赛季积分-改变前的分数

}
//------------------------------------------------------------------
// c2s
//------------------------------------------------------------------
/*
请求: 获取指定页的赛季数据
Page: 客户端对接功能-客户端操作可以跳页，与服务器商量(服务器获取页面数据后, 会临时缓存在内存中。如果跳页，并且玩家有了新的记录，会导致出现重复记录。 顺序获取，服务器已经处理重复记录)
返回： ReqJourneyRecordAssignPage
*/
//------------------------------------------------------------------
message ReqJourneyRecordGetAssignPage {
  int32                       Page = 1;    // 获取赛季指定页面
}

/*
请求: 测试数据
*/
//------------------------------------------------------------------
message ReqJourneyRecordTest {
  JourneyBattleRecord         TestContent = 1;    // 测试数据
}

//------------------------------------------------------------------
// s2c
//------------------------------------------------------------------
// 反馈: 指定页面记录
message RspJourneyRecordAssignPage {
  int32                       Page = 1;    // 返回数据页面编号
  int32                       SumPage = 2;    // 总页数
  repeated JourneyBattleRecord Records = 3;    // 战斗记录数据
}

//------------------------------------------------------------------
// 数据统计
//------------------------------------------------------------------

//------------------------------------------------------------------
// 公用结构
//------------------------------------------------------------------
// 统计数据展示结构
message JourenyStatsShowStruct {

}
//------------------------------------------------------------------
// c2s
//------------------------------------------------------------------
/*
请求: 获取指定展示数据
返回： ReqJourneyRecordAssignPage
*/
//------------------------------------------------------------------
message ReqJourneyStatsGetShow {
  string                      GameModel = 1;    // 游戏模式  DT_ContractGameMap.GameModel 参数
  int32                       TeamModel = 2;    // 组队模式: 1: 单人 2: 组队模式
  int32                       LevelModel = 3;    // 对局模式: 1: 不区分排位和非排位 2: 排位赛 3: 非排位赛
  int32                       Version = 4;    // 赛季的版本: 参看排位赛, 需要传入版本
}

//------------------------------------------------------------------
// s2c
//------------------------------------------------------------------
// 反馈: 推送统计展示数据
message RspJourneyStatsShow {
  string                      GameModel = 1;    // 游戏模式  DT_ContractGameMap.GameModel 参数
  int32                       TeamModel = 2;    // 组队模式: 1: 单人 2: 组队模式
  int32                       LevelModel = 3;    // 对局模式: 1: 不区分排位和非排位 2: 排位赛 3: 非排位赛
  int32                       Version = 4;    // 赛季的版本: 参看排位赛, 需要传入版本 非排位赛,传入 1
  map<int32, double>          ShowStats = 5;    // 统计数据展示
}

//------------------------------------------------------------------
// 成就系统
//------------------------------------------------------------------

//------------------------------------------------------------------
// 公用结构
//------------------------------------------------------------------
message JourneyAchievementDetail {
  int32                       ID = 1;    // 配置表ID
  int64                       Data = 2;    // 数据
  repeated int32              Stage = 3;    // 成就阶段完成记录
  map<int32, int32>            Award = 4;    // 阶段奖励领取记录
}

//------------------------------------------------------------------
// c2s
//------------------------------------------------------------------
//------------------------------------------------------------------
/*
请求: 获取所有的成就数据
返回： RspJourneyAchievementAll
*/
//------------------------------------------------------------------
message ReqJourneyAchievementGetAll{
}

message ReqJourneyAchievementGetAward {
  int32                       ID = 1;    // 创建ID
  int32                       Stage = 2;    // 领取的阶段
}

//------------------------------------------------------------------
// s2c
//------------------------------------------------------------------
// 反馈: 玩家成就数据刷新
message RspJourneyAchievementUpdate {
  map<int32, JourneyAchievementDetail>    UpdateAchievement = 1;      // 数据刷新的成就
}

// 反馈: 获取玩家所有的成就记录
message  RspJourneyAchievementAll{
  map<int32, JourneyAchievementDetail>    AllAchievement = 1;      // 所有的成就系统数据

}